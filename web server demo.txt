Sure, setting up a web server on an EC2 instance with a VPC, RDS, PHP, and MySQL involves several steps. Below is a detailed, step-by-step guide to accomplish this:

### Step 1: Set Up a VPC
1. **Create a VPC**:
   - Go to the VPC Dashboard in AWS Management Console.
   - Click on "Create VPC".
   - Enter a name and a CIDR block (e.g., `10.0.0.0/16`).
   - Click "Create".

2. **Create Subnets**:
   - Click on "Subnets" in the VPC Dashboard.
   - Create a public subnet (e.g., `10.0.1.0/24`) and a private subnet (e.g., `10.0.2.0/24`).

3. **Create an Internet Gateway**:
   - Click on "Internet Gateways" in the VPC Dashboard.
   - Create an Internet Gateway and attach it to your VPC.

4. **Route Tables**:
   - Create a route table for the public subnet.
   - Add a route to the Internet Gateway (destination `0.0.0.0/0`).
   - Associate the public subnet with this route table.
   - Create a route table for the private subnet (no need to add a route to the Internet Gateway).

### Step 2: Launch an EC2 Instance
1. **Launch Instance**:
   - Go to the EC2 Dashboard and click "Launch Instance".
   - Choose an Amazon Machine Image (AMI), e.g., Amazon Linux 2 AMI.
   - Select an instance type (e.g., t2.micro for free tier).
   - Configure the instance in the public subnet of your VPC.
   - Assign a public IP address.
   - Configure the security group to allow HTTP (port 80) and SSH (port 22) traffic.

2. **Key Pair**:
   - Create a new key pair or use an existing one.
   - Download the key pair file (e.g., `my-key-pair.pem`).

### Step 3: Install a Web Server and PHP on the EC2 Instance
1. **Connect to Your Instance**:
   - Use SSH to connect to your instance.
   ```
   ssh -i /path/to/my-key-pair.pem ec2-user@your-ec2-public-ip
   ```

2. **Install Apache and PHP**:
   ```
   sudo yum update -y
   sudo yum install -y httpd php php-mysqlnd
   ```

3. **Start and Enable Apache**:
   ```
   sudo systemctl start httpd
   sudo systemctl enable httpd
   ```

4. **Test PHP**:
   - Create a PHP info file:
   ```
   echo "<?php phpinfo(); ?>" | sudo tee /var/www/html/info.php
   ```
   - Open `http://your-ec2-public-ip/info.php` in a browser to verify PHP is working.

### Step 4: Set Up RDS for MySQL
1. **Create an RDS Instance**:
   - Go to the RDS Dashboard and click "Create database".
   - Choose MySQL as the engine.
   - Choose a version (e.g., MySQL 8.0).
   - Choose "Free tier" if applicable.
   - Configure the instance settings (DB instance identifier, master username, and password).
   - Select the VPC you created and the private subnet group.
   - Ensure that your security group allows inbound MySQL connections (port 3306).

2. **Get the Endpoint**:
   - After the RDS instance is created, note down the endpoint address.

### Step 5: Connect Your Web Server to the RDS Database
1. **Configure Security Groups**:
   - Modify the security group of your EC2 instance to allow outbound connections to the RDS instance on port 3306.
   - Ensure the RDS security group allows inbound connections from the EC2 instance.

2. **Install MySQL Client on EC2**:
   ```
   sudo yum install -y mysql
   ```

3. **Test the Connection**:
   ```
   mysql -h your-rds-endpoint -u your-username -p
   ```

4. **Configure PHP to Connect to MySQL**:
   - Create a PHP script to test the connection:
   ```php
   <?php
   $servername = "your-rds-endpoint";
   $username = "your-username";
   $password = "your-password";
   $dbname = "your-database";

   // Create connection
   $conn = new mysqli($servername, $username, $password, $dbname);

   // Check connection
   if ($conn->connect_error) {
       die("Connection failed: " . $conn->connect_error);
   }
   echo "Connected successfully";
   ?>
   ```
   - Save the script to `/var/www/html/testdb.php`.
   - Open `http://your-ec2-public-ip/testdb.php` in a browser to verify the connection.

### Step 6: Deploy Your Application
- Place your application files in `/var/www/html/`.
- Ensure proper file permissions:
  ```
  sudo chown -R apache:apache /var/www/html/
  sudo chmod -R 755 /var/www/html/
  ```

### Additional Considerations
- **Security**: Secure your EC2 and RDS instances by using proper security group rules and IAM roles.
- **Backups**: Set up automatic backups for your RDS instance.
- **Scaling**: Consider using Auto Scaling Groups for your EC2 instances and read replicas for your RDS database.

This guide provides a basic setup. Depending on your application requirements, you may need to configure additional services or settings.